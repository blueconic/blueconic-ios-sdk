#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
#ifndef BLUECONICCLIENT_SWIFT_H
#define BLUECONICCLIENT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BlueConicClient",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSString;
SWIFT_CLASS("_TtC15BlueConicClient5Event")
@interface Event : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nullable location;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull handledBy;
- (void)addHandledBy:(NSString * _Nonnull)handledBy;
- (NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC15BlueConicClient13AdvancedEvent")
@interface AdvancedEvent : Event
@property (nonatomic, copy) NSString * _Nonnull eventName;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable context;
- (nonnull instancetype)initWithEventName:(NSString * _Nonnull)eventName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEventName:(NSString * _Nonnull)eventName context:(NSArray<NSString *> * _Nonnull)context OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum ErrorType : NSInteger;
@class NSError;
SWIFT_CLASS("_TtC15BlueConicClient7BCError")
@interface BCError : NSObject
@property (nonatomic, readonly) enum ErrorType type;
@property (nonatomic, readonly, strong) NSError * _Nonnull nsError;
@property (nonatomic, readonly, copy) NSString * _Nullable message;
- (nonnull instancetype)initWithType:(enum ErrorType)type nsError:(NSError * _Nonnull)nsError message:(NSString * _Nullable)message OBJC_DESIGNATED_INITIALIZER;
+ (BCError * _Nonnull)withType:(enum ErrorType)type message:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKWebView;
@class WKNavigationAction;
@class WKNavigation;
@class UIViewController;
@class NSURL;
@class NSURLRequest;
SWIFT_CLASS("_TtC15BlueConicClient10BCLightbox")
@interface BCLightbox : NSObject <WKNavigationDelegate>
@property (nonatomic) float margin;
@property (nonatomic, strong) WKWebView * _Nonnull lightboxView;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didStartProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
+ (NSString * _Nonnull)constructHtmlWithViewController:(UIViewController * _Nonnull)viewController content:(NSString * _Nullable)content cssUrl:(NSString * _Nullable)cssUrl inlineCss:(NSString * _Nullable)inlineCss SWIFT_WARN_UNUSED_RESULT;
+ (BCLightbox * _Nonnull)makeContentFromHtmlWithViewController:(UIViewController * _Nonnull)viewController html:(NSString * _Nonnull)html iconUrl:(NSString * _Nullable)iconUrl SWIFT_WARN_UNUSED_RESULT;
+ (BCLightbox * _Nonnull)makeContentWithViewController:(UIViewController * _Nonnull)viewController content:(NSString * _Nonnull)content baseURL:(NSURL * _Null_unspecified)baseURL iconUrl:(NSString * _Nullable)iconUrl SWIFT_WARN_UNUSED_RESULT;
+ (BCLightbox * _Nonnull)makeURLStringWithViewController:(UIViewController * _Nonnull)viewController urlString:(NSString * _Nonnull)urlString iconUrl:(NSString * _Nullable)iconUrl SWIFT_WARN_UNUSED_RESULT;
+ (BCLightbox * _Nonnull)makeURLWithViewController:(UIViewController * _Nonnull)viewController url:(NSURL * _Nonnull)url iconUrl:(NSString * _Nullable)iconUrl SWIFT_WARN_UNUSED_RESULT;
+ (BCLightbox * _Nonnull)makeURLRequestWithViewController:(UIViewController * _Nonnull)viewController request:(NSURLRequest * _Nonnull)request iconUrl:(NSString * _Nullable)iconUrl SWIFT_WARN_UNUSED_RESULT;
- (void)showIfReady;
- (void)show;
- (void)hide;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BlueConicConfiguration;
@class Callback;
@class UIView;
@class BlueConicEventManager;
@class NSDate;
@class BlueConicSegment;
SWIFT_CLASS("_TtC15BlueConicClient9BlueConic")
@interface BlueConic : NSObject
/// Get an instance of the BlueConic client.
/// <pre&gt:
/// // Swift:
/// let client: BlueConicClient = BlueConicClient.getInstance(self)
/// // Objective-C:
/// BlueConicClient* client = [BlueConicClient getInstance:self];
/// </pre&gt:
/// \param context The application context.
///
///
/// returns:
/// The BlueConic client instance.
+ (BlueConic * _Nonnull)getInstance:(UIViewController * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
/// Get an instance of the BlueConic client.
/// <pre&gt:
/// // Swift:
/// let client: BlueConicClient = BlueConicClient.getInstance()
/// // Objective-C:
/// BlueConicClient* client = [BlueConicClient getInstance];
/// </pre&gt:
/// \param context The application context.
///
///
/// returns:
/// The BlueConic client instance.
+ (BlueConic * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize the BlueConic client with the given configuration.Clears the profile ID for the user.
/// \param configuration The configuration for the BlueConic client.
///
- (void)initialize:(BlueConicConfiguration * _Nonnull)configuration callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Retrieves the current BlueConic configuration.
- (BlueConicConfiguration * _Nonnull)getConfiguration SWIFT_WARN_UNUSED_RESULT;
/// Manually set the ViewController context for the current instance of BlueConicClient.
- (void)setContext:(UIViewController * _Nullable)context;
/// Returns the first value for a given profile property.
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// let hobby: String = client.getProfileValue("hobby")
/// // Objective-C:
/// NSString* hobby = [client getProfileValue:@"hobby"];
/// </pre&gt:
/// \param property The profile property to get the values for.
///
///
/// returns:
/// The first value
- (NSString * _Nonnull)getProfileValue:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Return the values for a given profile property.
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// let hobbies: [String] = client.getProfileValues("hobbies")
/// // Objective-C:
/// NSArray* hobbies = [client getProfileValues:@"hobbies"];
/// </pre&gt:
/// \param property The profile property to get the values for.
///
///
/// returns:
/// A collection containing the values.
- (NSArray<NSString *> * _Nullable)getProfileValues:(NSString * _Nonnull)property SWIFT_WARN_UNUSED_RESULT;
/// Returns all the profile properties stored for the user.
- (NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull)getAllProfileProperties SWIFT_WARN_UNUSED_RESULT;
/// Returns the current ViewController.
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// let viewController = client.getViewController()
/// // Objective-C:
/// UIViewController* viewController = [client getViewController];
/// </pre&gt:
///
/// returns:
/// The current ViewController.
- (UIViewController * _Nullable)getViewController SWIFT_WARN_UNUSED_RESULT;
/// Returns a view component based on the given identifier or <code>nil</code> is no match is found.
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// @IBOutlet weak var view: UIView!
/// let view: UIView? = client.getView("#view")
/// // Objective-C:
/// @property (weak, nonatomic) IBOutlet UIView* view;
/// UIView* view = [client getView:@"#view"];
/// </pre&gt:
/// \param selector The Identifier, e.g. "#view".
///
///
/// returns:
/// The view or <code>nil</code>
- (UIView * _Nullable)getView:(NSString * _Nonnull)selector SWIFT_WARN_UNUSED_RESULT;
/// Returns the screenName either set in createEvent or the ViewControllers title.
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// client.createEvent("PAGEVIEW", properties: ["screenName": "Main/HOMETAB"])
/// var screenName: String = client.getScreenName()
/// // Objective-C:
/// [client createEvent:@"PAGEVIEW" properties:@{@"screenName": @"MAIN/HOMETAB"}];
/// NSString* screenName = [client getScreenName];
/// </pre&gt:
///
/// returns:
/// The screen name
- (NSString * _Nonnull)getScreenName SWIFT_WARN_UNUSED_RESULT;
/// Adds a single property value to the profile.
/// If there are already values for a property the new value will be added.
/// Values for a property need to be unique; passing the same value multiple times will have no effect.
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// client.addProfileValue("hobbies", value:"tennis")
/// // Objective-C:
/// [client addProfileValue:@"hobbies" value:@"tennis"];
/// </pre&gt:
/// \param property The profile property to add the values for.
///
/// \param value The property value to add to the profile.
///
- (void)addProfileValue:(NSString * _Nonnull)property value:(NSString * _Nonnull)value callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Adds property values to the profile. The values from the collection are added to the profile.
/// If there are already values for a property the new values will be added.
/// Values for a property need to be unique; passing the same values multiple times will have no effect.
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// let hobbyArray = ["tennis", "soccer"]
/// client.addProfileValues("hobbies", values:hobbyArray)
/// // Objective-C:
/// NSArray* hobbyArray = [NSArray arrayWithObjects:@"tennis", @"soccer", nil];
/// [client addProfileValues:@"hobbies" values:hobbyArray];
/// </pre&gt:
/// \param property The profile property to add the values for.
///
/// \param values The property values to add to the profile.
///
- (void)addProfileValues:(NSString * _Nonnull)property values:(NSArray<NSString *> * _Nonnull)values callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Sets values on the profile. Passing a property that was already set with values will cause for the old values to be removed.
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// client.setProfileValue("hobbies", value:"tennis")
/// // Objective-C:
/// [client setProfileValue:@"hobbies" value:@"tennis"];
/// </pre&gt:
/// \param name The profile property to add the values for.
///
/// \param value The profile value to store.
///
- (void)setProfileValue:(NSString * _Nonnull)name value:(NSString * _Nonnull)value callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Sets values on the profile. Passing a property that was already set with values will cause for the old values to be removed.
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// let hobbyArray = ["tennis", "soccer"]
/// client.setProfileValues(“hobbies”, values:hobbyArray)
/// // Objective-C:
/// NSArray* hobbyArray = [NSArray arrayWithObjects:@"tennis", @"soccer", nil];
/// [client setProfileValues:@"hobbies" values:hobbyArray];
/// </pre&gt:
/// \param name The profile property to add the values for.
///
/// \param values The profile values to store.
///
- (void)setProfileValues:(NSString * _Nonnull)name values:(NSArray<NSString *> * _Nonnull)values callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Increment a single property value to the profile.
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// client.incrementProfileValue("hobbies", value:"1337")
/// // Objective-C:
/// [client incrementProfileValue:@"hobbies" value:@"1337"];
/// </pre&gt:
/// \param property The profile property to increment the values for.
///
/// \param value The property value to increment to the profile.
///
- (void)incrementProfileValue:(NSString * _Nonnull)property value:(NSString * _Nonnull)value callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Sets the Mobile Ad ID to the profile.
/// Passing a property that was already set with values will cause for the old values to be removed.
/// Since recent change in IDFA and new rules in iOS 14, BlueConic will no longer automatically call the ASIdentifierManager.
/// For an app to capture the Mobile App ID, and where you make the choice to use this service, you can add the Mobile Ad Id with this call
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// guard ASIdentifierManager.shared().isAdvertisingTrackingEnabled else {
/// return nil
/// }
/// client.setMobileAdId(ASIdentifierManager.shared().advertisingIdentifier.uuidString)
/// // Objective-C:
/// if([[ASIdentifierManager sharedManager] isAdvertisingTrackingEnabled]){
/// NSUUID *idfa = [[ASIdentifierManager sharedManager] advertisingIdentifier];
/// [client setMobileAdId: [idfa UUIDString]];
/// }
/// </pre&gt:
/// \param mobileAdId The Mobile Ad ID for that give device (IDFA).
///
- (void)setMobileAdId:(NSString * _Nullable)mobileAdId callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Sets BlueConic Enabled. Passing a true of false to enable or disable BlueConic functionality.
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// client.setEnabled(false)
/// // Objective-C:
/// BOOL isEnabled = [client isEnabled];
/// </pre&gt:
/// <ul>
///   <li>
///     returns name: The profile property to add the values for.
///   </li>
/// </ul>
/// \param value The profile value to store.
///
- (void)setEnabled:(BOOL)isEnabled;
/// Return the satus of BlueConic, whether it is enabled or disabled.
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// let isEnabled = client.isEnabled()
/// // Objective-C:
/// [client isEnabled];
/// </pre&gt:
/// \param value The profile value to store.
///
///
/// returns:
/// isEnabled Whether the BlueConicClient is enabled or disabled.
- (BOOL)isEnabled SWIFT_WARN_UNUSED_RESULT;
/// Return the ID of the profile
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// var profileId: String? = client.getProfileId()
/// // Objective-C:
/// NSString* profileId = [client getProfileId];
/// </pre&gt:
///
/// returns:
/// The ID of the profile
- (NSString * _Nullable)getProfileId SWIFT_WARN_UNUSED_RESULT;
/// Clears the profile ID from the BlueConic client locally (cache). A new profile ID will be generated.
/// \param callback The callback function containing information about the operation.
///
- (void)clearProfileId:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Setter for the locale to get the parameters for. By default, the default locale configured in BlueConic is used.
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// client.setLocale("en_US")
/// // Objective-C:
/// [client setLocale:@"en_US"];
/// </pre&gt:
/// \param locale The locale, e.g. ‘en_US’.
///
- (void)setLocale:(NSString * _Nonnull)locale;
/// Checks whether the app was started with simulator data. If so we try to get the username and the the mobile
/// session id to connect to the simulator. The intent should look like:
/// "<appID>://<hostname>/<username>/<mobilesSessionId>".
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// // Implement in AppDelegate.swift
/// func application(application: UIApplication, openURL url: NSURL, sourceApplication: String?, annotation: AnyObject) -> Bool {
/// BlueConicClient.getInstance(nil).setURL(url)
/// return true
/// }
/// // Objective-C:
/// // Implement in AppDelegate.m
/// <ul>
///   <li>
///     (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation {
///     [[BlueConicClient getInstance:nil] setURL:url];
///     return YES;
///     }
///     </pre&gt:
///   </li>
/// </ul>
/// \param url The url retrieved from application.
///
- (void)setURL:(NSURL * _Nonnull)url;
/// Returns the privacy legislation of this profile
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// let privacyLegislation: String = client.getPrivacyLegislation()
/// // Objective-C:
/// NSString* privacyLegislation = [client getPrivacyLegislation];
/// </pre&gt:
///
/// returns:
/// The privacy legislation of the profile
- (NSString * _Nullable)getPrivacyLegislation SWIFT_WARN_UNUSED_RESULT;
/// Returns the consented objectives of this profile
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// let consentedObjectives: String = client.getConsentedObjectives()
/// // Objective-C:
/// NSString* consentedObjectives = [client getConsentedObjectives];
/// </pre&gt:
///
/// returns:
/// The consented objectives of the profile
- (NSArray<NSString *> * _Nullable)getConsentedObjectives SWIFT_WARN_UNUSED_RESULT;
/// Returns the refused objectives of this profile
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// let refusedObjectives: String = client.getRefusedObjectives()
/// // Objective-C:
/// NSString* refusedObjectives = [client getRefusedObjectives];
/// </pre&gt:
///
/// returns:
/// The refused objectives of the profile
- (NSArray<NSString *> * _Nullable)getRefusedObjectives SWIFT_WARN_UNUSED_RESULT;
/// Setter for the privacy legislation for this profile
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// client.setPrivacyLegislation()
/// // Objective-C:
/// [client setPrivacyLegislation:@"GDPR"];
/// </pre&gt:
/// \param legislation The legislation, e.g. ‘GDPR’.
///
- (void)setPrivacyLegislation:(NSString * _Nonnull)legislation;
/// Adds a consented objective to this profile.
/// If there are already values for a property the new value will be added.
/// Values for a property need to be unique; passing the same value multiple times will have no effect.
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// client.addConsentedObjective("tracking")
/// // Objective-C:
/// [client addConsentedObjective:@"tracking"];
/// </pre&gt:
/// \param objectiveId The objective ID to consent.
///
- (void)addConsentedObjective:(NSString * _Nonnull)objectiveId callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Adds a refused objective to this profile.
/// If there are already values for a property the new value will be added.
/// Values for a property need to be unique; passing the same value multiple times will have no effect.
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// client.addRefusedObjective("tracking")
/// // Objective-C:
/// [client addRefusedObjective:@"tracking"];
/// </pre&gt:
/// \param objectiveId The objective ID to refuse.
///
- (void)addRefusedObjective:(NSString * _Nonnull)objectiveId callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Sets consented objectives to this profile.
/// Passing a property that was already set with values will cause for the old values to be removed.
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// let objectiveIds = ["tracking", "advertising"]
/// client.setConsentedObjectives(objectiveIds)
/// // Objective-C:
/// NSArray* objectiveIds = [NSArray arrayWithObjects:@"tracking", @"advertising", nil];
/// [client setConsentedObjectives:objectiveIds];
/// </pre&gt:
/// \param objectiveIds The consented objective IDs to set.
///
- (void)setConsentedObjectives:(NSArray<NSString *> * _Nonnull)objectiveIds callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Sets refused objectives to this profile.
/// Passing a property that was already set with values will cause for the old values to be removed.
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// let objectiveIds = ["tracking", "advertising"]
/// client.setRefusedObjectives(objectiveIds)
/// // Objective-C:
/// NSArray* objectiveIds = [NSArray arrayWithObjects:@"tracking", @"advertising", nil];
/// [client setRefusedObjectives:objectiveIds];
/// </pre&gt:
/// \param objectiveIds The refused objective IDs to set.
///
- (void)setRefusedObjectives:(NSArray<NSString *> * _Nonnull)objectiveIds callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Update the profile
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// let hobbies: [String] = client.updateProfile()
/// // Objective-C:
/// NSArray* hobbies = [client updateProfile];
/// </pre&gt:
- (void)updateProfile:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// BlueConic event manager used to publish Listener and Dialogue events.
- (BlueConicEventManager * _Nonnull)getEventManager SWIFT_WARN_UNUSED_RESULT;
/// Registers a PAGEVIEW event with the given screen name and properties.
/// \param screenName The screen name.
///
/// \param properties A map with properties for the event.
///
- (void)createPageViewEventWithScreenName:(NSString * _Nonnull)screenName properties:(NSDictionary<NSString *, id> * _Nonnull)properties callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Registers a VIEW event with the given interaction ID and properties.
/// \param interactionId The interaction ID.
///
/// \param properties A map with properties for the event.
///
- (void)createViewEventWithInteractionId:(NSString * _Nonnull)interactionId properties:(NSDictionary<NSString *, id> * _Nonnull)properties callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Registers a CONVERSION event with the given interaction ID and properties.
/// \param interactionId The interaction ID.
///
/// \param properties A map with properties for the event.
///
- (void)createConversionEventWithInteractionId:(NSString * _Nonnull)interactionId properties:(NSDictionary<NSString *, id> * _Nonnull)properties callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Registers a CLICK event with the given interaction ID, properties and context.
/// \param interactionId The interaction ID.
///
/// \param properties A map with properties for the event.
///
- (void)createClickEventWithInteractionId:(NSString * _Nonnull)interactionId properties:(NSDictionary<NSString *, id> * _Nonnull)properties callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Registers an event of the specified type with the given properties. For a "PAGEVIEW" event a screen name can be
/// passed, so interactions can be restricted on the where tab in BlueConic.
/// For a "VIEW", "CLICK" or "CONVERSION" event an interactionId should be passed to register the event for.
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// client.createEvent("CUSTOMEVENT", data: ["context": self._context.getInteractionId()])
/// // Objective-C:
/// [client createEvent:@"CUSTOMEVENT" properties:@{@"interactionId": [self._context getInteractionId]}];
/// </pre&gt:
/// // Swift:
/// let contextArray = ["tennis", "soccer"]
/// client.createEvent("CUSTOMEVENT", data:contextArray)
/// // Objective-C:
/// NSArray* contextArray = [NSArray arrayWithObjects:@"tennis", @"soccer", nil];
/// [client createEvent:@"CUSTOMEVENT" data:contextArray];
/// \param eventType The event type. (e.g: "PAGEVIEW", "VIEW", "CLICK", "CONVERSION")
///
/// \param data A map with data for the event.
///
- (void)createEvent:(NSString * _Nonnull)eventType data:(NSDictionary<NSString *, id> * _Nullable)data;
/// Registers an event of the specified type with the given properties. For a "PAGEVIEW" event a screen name can be
/// passed, so interactions can be restricted on the where tab in BlueConic.
/// For a "VIEW", "CLICK" or "CONVERSION" event an interactionId should be passed to register the event for.
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// client.createEvent("CUSTOMEVENT", data: ["context": self._context.getInteractionId()])
/// // Objective-C:
/// [client createEvent:@"CUSTOMEVENT" properties:@{@"interactionId": [self._context getInteractionId]}];
/// </pre&gt:
/// // Swift:
/// let contextArray = ["tennis", "soccer"]
/// client.createEvent("CUSTOMEVENT", data:contextArray)
/// // Objective-C:
/// NSArray* contextArray = [NSArray arrayWithObjects:@"tennis", @"soccer", nil];
/// [client createEvent:@"CUSTOMEVENT" data:contextArray];
/// \param eventType The event type. (e.g: "PAGEVIEW", "VIEW", "CLICK", "CONVERSION")
///
/// \param data A map with data for the event.
///
- (void)createEvent:(NSString * _Nonnull)eventType data:(NSDictionary<NSString *, id> * _Nullable)data callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Registers an event of the specified type with the given properties. For a "PAGEVIEW" event a screen name can be
/// passed, so interactions can be restricted on the where tab in BlueConic.
/// For a "VIEW", "CLICK" or "CONVERSION" event an interactionId should be passed to register the event for.
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// client.createEvent("PAGEVIEW", properties: ["screenName": "Main/HOMETAB"])
/// client.createEvent("CLICK", properties: ["interactionId": self._context.getInteractionId()])
/// // Objective-C:
/// [client createEvent:@"PAGEVIEW" properties:@{@"screenName": @"MAIN/HOMETAB"}];
/// [client createEvent:@"CLICK" properties:@{@"interactionId": [self._context getInteractionId]}];
/// </pre&gt:
/// \param eventType The event type. (e.g: "PAGEVIEW", "VIEW", "CLICK", "CONVERSION")
///
/// \param properties A map with properties for the event.
///
- (void)createEvent:(NSString * _Nonnull)eventType properties:(NSDictionary<NSString *, NSString *> * _Nullable)properties;
/// Registers an event of the specified type with the given properties. For a "PAGEVIEW" event a screen name can be
/// passed, so interactions can be restricted on the where tab in BlueConic.
/// For a "VIEW", "CLICK" or "CONVERSION" event an interactionId should be passed to register the event for.
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// client.createEvent("PAGEVIEW", properties: ["screenName": "Main/HOMETAB"])
/// client.createEvent("CLICK", properties: ["interactionId": self._context.getInteractionId()])
/// // Objective-C:
/// [client createEvent:@"PAGEVIEW" properties:@{@"screenName": @"MAIN/HOMETAB"}];
/// [client createEvent:@"CLICK" properties:@{@"interactionId": [self._context getInteractionId]}];
/// </pre&gt:
/// \param eventType The event type. (e.g: "PAGEVIEW", "VIEW", "CLICK", "CONVERSION")
///
/// \param properties A map with properties for the event.
///
/// \param completion Completion handler
///
- (void)createEvent:(NSString * _Nonnull)eventType properties:(NSDictionary<NSString *, NSString *> * _Nullable)properties callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Registers an event on the timeline of the profile with the given properties.
/// Note that when using this method, the ID of the timeline event will be an automatically generated UUID.
/// \param eventType The type of the Timeline event.
///
/// \param eventDate The date of the Timeline event.
///
/// \param properties A map with properties for the event.
///
/// \param callback The callback function when results are ready.
///
- (void)createTimelineEvent:(NSString * _Nonnull)eventType eventDate:(NSDate * _Nonnull)eventDate properties:(NSDictionary<NSString *, id> * _Nonnull)properties callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Registers an event on the timeline of the profile with the given properties.
/// Note that when using this method, the ID of the timeline event will be an automatically generated UUID.
/// \param eventId The ID of the Timeline event.
///
/// \param eventType The type of the Timeline event.
///
/// \param eventDate The date of the Timeline event.
///
/// \param properties A map with properties for the event.
///
/// \param callback The callback function when results are ready.
///
- (void)createTimelineEventById:(NSString * _Nonnull)eventId eventType:(NSString * _Nonnull)eventType eventDate:(NSDate * _Nonnull)eventDate properties:(NSDictionary<NSString *, id> * _Nonnull)properties callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Register plugin class. Assign a custom plugin to the list of available plugins.
/// Which are then validated during the PAGEVIEW event, which creates and executes the correct plugin for you.
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// client.registerPluginClass(TestPlugin.self)
/// // Objective-C:
/// [client registerPluginClass: [TestPlugin class]];
/// </pre&gt:
/// \param pluginClass The  class of the plugin.
///
- (void)registerPluginClass:(Class _Nonnull)pluginClass;
/// Register plugin class with classname. Assign a custom plugin to the list of available plugins.
/// Which are then validated during the PAGEVIEW event, which creates and executes the correct plugin for you.
/// Specify the className to make sure you select the correct PluginClass when loading in interactions.
/// Automatically determine the className the use registerPluginClass
/// <h4>Example</h4>
/// <pre&gt:
/// // Swift:
/// client.registerPluginClass(TestPlugin.self, className: "BlueConicClient.TestPlugin")
/// // Objective-C:
/// [client registerPluginClass: [TestPlugin class] className: @"BlueConicClient.TestPlugin"];
/// </pre&gt:
/// \param pluginClass The  class of the plugin.
///
- (void)registerPluginClass:(Class _Nonnull)pluginClass className:(NSString * _Nonnull)className;
/// Returns all available segment the profile falls in.
/// The list of segments is updated after each page view request.
/// It will retrieve the new segments when a new createEvent: “PAGEVIEW” is called.
///
/// returns:
/// All connections from the last pageview
- (NSArray<BlueConicSegment *> * _Nonnull)getSegments SWIFT_WARN_UNUSED_RESULT;
/// Returns whether the profile falls into the segment.
/// true when the profile is part of the segment, false when it is not part of it..
/// It will retrieve the new segments when a new createEvent: “PAGEVIEW” is called.
///
/// returns:
/// true when the profile falls in the segment
- (BOOL)hasSegment:(NSString * _Nonnull)segmentId SWIFT_WARN_UNUSED_RESULT;
/// Sets the platform information.
/// Only use this method when you want to use it in combination with a BlueConic plugin (ex.: React Native).
/// \param platformName The platform name.
///
/// \param platformVersion The platform version.
///
+ (void)setPlatformInformationWithPlatformName:(NSString * _Nonnull)platformName platformVersion:(NSString * _Nonnull)platformVersion;
@end

SWIFT_CLASS("_TtC15BlueConicClient22BlueConicConfiguration")
@interface BlueConicConfiguration : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS_NAMED("Builder")
@interface BlueConicConfigurationBuilder : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BlueConicConfigurationBuilder * _Nonnull)setHostName:(NSString * _Nonnull)hostName SWIFT_WARN_UNUSED_RESULT;
- (BlueConicConfigurationBuilder * _Nonnull)setOverrideAppId:(NSString * _Nonnull)appID SWIFT_WARN_UNUSED_RESULT;
- (BlueConicConfigurationBuilder * _Nonnull)setDebugMode:(BOOL)isDebugMode SWIFT_WARN_UNUSED_RESULT;
- (BlueConicConfigurationBuilder * _Nonnull)setShared:(BOOL)shared SWIFT_WARN_UNUSED_RESULT;
- (BlueConicConfigurationBuilder * _Nonnull)setSimulatorData:(NSString * _Nonnull)simulatorUsername simulatorMobileSessionId:(NSString * _Nonnull)simulatorMobileSessionId SWIFT_WARN_UNUSED_RESULT;
- (BlueConicConfiguration * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end

@protocol EventHandler;
SWIFT_CLASS("_TtC15BlueConicClient21BlueConicEventManager")
@interface BlueConicEventManager : NSObject
+ (BlueConicEventManager * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// Publish an event to all subscribers, add any parameters as a String array. These will be used to match subscribers if configured in Blueconic.
/// \param event The event that will be published
///
- (void)publish:(Event * _Nonnull)event callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Adds an event listener. This listens to publish events with the same name and optionally a certain eventObject configuration.
/// \param eventName A string containg the publish event name we should listen to
///
/// \param callbackObject A function describing how a handled event should be…handled.
///
/// \param uuid A UUID for the listener that subscribed
///
- (void)subscribe:(NSString * _Nonnull)eventName callbackObject:(id <EventHandler> _Nonnull)callbackObject onlyOnce:(BOOL)onlyOnce identifier:(NSString * _Nonnull)identifier;
/// Clears the event queue
- (void)clearEvents;
/// Publish all events that were in the event queue. These will be validated by the given listeners and happens after the onLoad
/// Used at a new pageview after all listeners are activated, and onLoad is called.
/// \param event The event that will be published
///
- (void)handleAllEvents;
/// Clears the event handlers, takes an interaction id that matches with several rule id’s, removes those rule id’s
/// \param key To clear the event handlers is based on the key
///
- (void)clearEventHandlers:(NSString * _Nullable)key;
/// Clears the event when the location is changed (another activity is opened)
- (void)cleanup;
/// Publishes an ADVANCED event with the given selector and context.
/// \param eventName The event name.
///
/// \param context The list of context elements.
///
- (void)publishAdvancedEventWithEventName:(NSString * _Nonnull)eventName context:(NSArray<NSString *> * _Nonnull)context callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Publishes a CLICK event with the given selector and context.
/// \param selector The selector.
///
/// \param context The list of context elements.
///
- (void)publishClickEventWithSelector:(NSString * _Nonnull)selector context:(NSArray<NSString *> * _Nonnull)context callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Publishes a FORM SUBMIT event with the given selector and context.
/// \param selector The selector.
///
/// \param context The list of context elements.
///
- (void)publishFormSubmitEventWithSelector:(NSString * _Nonnull)selector context:(NSArray<NSString *> * _Nonnull)context callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Publishes a UPDATE CONTENT event with the content and selector.
/// \param selector The selector.
///
/// \param content The content.
///
- (void)publishUpdateContentEventWithSelector:(NSString * _Nonnull)selector content:(NSString * _Nonnull)content callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
/// Publishes a UPDATE VALUES event with the selector and values.
/// \param selector The selector.
///
/// \param values The list of values.
///
- (void)publishUpdateValuesEventWithSelector:(NSString * _Nonnull)selector values:(NSArray<NSString *> * _Nonnull)values callback:(void (^ _Nullable)(Callback * _Nonnull))callback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class InteractionContext;
SWIFT_PROTOCOL("_TtP15BlueConicClient15BlueConicPlugin_")
@protocol BlueConicPlugin
- (nonnull instancetype)initWithClient:(BlueConic * _Nonnull)client context:(InteractionContext * _Nonnull)context;
- (void)onLoad;
@optional
- (void)onDestroy;
@end

/// Interface Segment
SWIFT_CLASS("_TtC15BlueConicClient16BlueConicSegment")
@interface BlueConicSegment : NSObject
/// Returns the ID of the Segment.
/// <pre&gt:
/// // Swift:
/// let segmentId = segment.getId()
/// // Objective-C:
/// String* segmentId = [segment getId];
/// </pre&gt:
///
/// returns:
/// The Name of the Segment
- (NSString * _Nonnull)getId SWIFT_WARN_UNUSED_RESULT;
/// Returns the name of the Segment.
/// <pre&gt:
/// // Swift:
/// let segmentName = segment.getName()
/// // Objective-C:
/// String* segmentName = [segment getName];
/// </pre&gt:
///
/// returns:
/// The Name of the Segment
- (NSString * _Nonnull)getName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC15BlueConicClient8Callback")
@interface Callback : NSObject
@property (nonatomic, readonly) BOOL success;
@property (nonatomic, readonly, strong) BCError * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC15BlueConicClient10ClickEvent")
@interface ClickEvent : Event
@property (nonatomic, readonly, copy) NSString * _Nonnull selector;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable context;
- (nonnull instancetype)initWithSelector:(NSString * _Nonnull)selector OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSelector:(NSString * _Nonnull)selector context:(NSArray<NSString *> * _Nonnull)context OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Interface Connection
SWIFT_CLASS("_TtC15BlueConicClient10Connection")
@interface Connection : NSObject
/// Returns the id of the connection.
/// <pre&gt:
/// // Swift:
/// let context: InteractionContext!
/// let connection: Connection? = context.getConnection(connectionId)
/// let connectionId = connection.getId()
/// // Objective-C:
/// InteractionContext* context;
/// Connection* connection = [context getConnection:connectionId];
/// NSString* connectionId = [connection getId];
/// </pre&gt:
///
/// returns:
/// The id of the connection.
- (NSString * _Nonnull)getId SWIFT_WARN_UNUSED_RESULT;
/// Returns the parameters of the connection.
/// <pre&gt:
/// // Swift:
/// let context: InteractionContext!
/// let connection: Connection? = context.getConnection(connectionId)
/// let connectionParameters: Dictionary<String, [String]> = connection.getParameters()
/// // Objective-C:
/// InteractionContext* context;
/// Connection* connection = [context getConnection:connectionId];
/// NSDictionary* connectionParameters = [connection getParameters];
/// </pre&gt:
///
/// returns:
/// The parameters of the connection.
- (NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull)getParameters SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ErrorType, open) {
  ErrorTypeNotEnabled = 0,
  ErrorTypeNoNetworkConnectionError = 1,
  ErrorTypeAlreadyEnabled = 2,
  ErrorTypeInteractionRetrievalError = 3,
  ErrorTypeInvalidParameters = 4,
  ErrorTypeInternalError = 5,
};

/// Protocol for event handlers
SWIFT_PROTOCOL("_TtP15BlueConicClient12EventHandler_")
@protocol EventHandler
/// Handles an event (eg click event, advanced event), which leads to points for keywords
/// \param event Event object
///
- (void)handleEvent:(Event * _Nonnull)event;
@end

SWIFT_CLASS("_TtC15BlueConicClient16FieldChangeEvent")
@interface FieldChangeEvent : ClickEvent
- (nonnull instancetype)initWithSelector:(NSString * _Nonnull)selector OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSelector:(NSString * _Nonnull)selector context:(NSArray<NSString *> * _Nonnull)context OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC15BlueConicClient15FormSubmitEvent")
@interface FormSubmitEvent : ClickEvent
- (nonnull instancetype)initWithSelector:(NSString * _Nonnull)selector OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSelector:(NSString * _Nonnull)selector context:(NSArray<NSString *> * _Nonnull)context OBJC_DESIGNATED_INITIALIZER;
@end

/// Interface InteractionContext
SWIFT_CLASS("_TtC15BlueConicClient18InteractionContext")
@interface InteractionContext : NSObject
/// Returns the interaction id.
/// <pre&gt:
/// // Swift:
/// let interactionId: String? = context.getInteractionId()
/// // Objective-C:
/// NSString* interactionId = [context getInteractionId];
/// </pre&gt:
///
/// returns:
/// The interaction id
- (NSString * _Nullable)getInteractionId SWIFT_WARN_UNUSED_RESULT;
/// Returns the interaction name.
/// <pre&gt:
/// // Swift:
/// let interactionName: String? = context.getInteractionName()
/// // Objective-C:
/// NSString* interactionName = [context getInteractionName];
/// </pre&gt:
///
/// returns:
/// The interaction id
- (NSString * _Nullable)getInteractionName SWIFT_WARN_UNUSED_RESULT;
/// Returns the interaction type.
/// <pre&gt:
/// // Swift:
/// let interactionTypeId: String? = context.getInteractionTypeId()
/// // Objective-C:
/// NSString* interactionTypeId = [context getInteractionTypeId];
/// </pre&gt:
///
/// returns:
/// The interaction type
- (NSString * _Nullable)getInteractionTypeId SWIFT_WARN_UNUSED_RESULT;
/// Returns the plugin type.
/// <pre&gt:
/// // Swift:
/// let pluginType: String? = context.getPluginType()
/// // Objective-C:
/// NSString* pluginType = [context getPluginType];
/// </pre&gt:
///
/// returns:
/// The interaction id
- (NSString * _Nullable)getPluginType SWIFT_WARN_UNUSED_RESULT;
/// Returns the id of the Dialogue, only available for interactions.
/// It will return nil for all other types
/// <pre&gt:
/// // Swift:
/// let dialogueId: String? = context.getDialogueId()
/// // Objective-C:
/// NSString* dialogueId = [context getDialogueId];
/// </pre&gt:
///
/// returns:
/// The dialogue id
- (NSString * _Nullable)getDialogueId SWIFT_WARN_UNUSED_RESULT;
/// Returns the name of the Dialogue, only available for interactions.
/// It will return nil for all other types
/// <pre&gt:
/// // Swift:
/// let dialogueName: String? = context.getDialogueName()
/// // Objective-C:
/// NSString* dialogueName = [context getDialogueName];
/// </pre&gt:
///
/// returns:
/// The dialogue name
- (NSString * _Nullable)getDialogueName SWIFT_WARN_UNUSED_RESULT;
/// Returns the interaction parameters in a map.
/// <pre&gt:
/// // Swift:
/// let parameters: Dictionary<String, [String]> = context.getParameters()
/// // Objective-C:
/// NSDictinoary* parameters = [context getParameters];
/// </pre&gt:
///
/// returns:
/// The parameters
- (NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull)getParameters SWIFT_WARN_UNUSED_RESULT;
/// Returns the connection by id.
/// <pre&gt:
/// // Swift:
/// let context: InteractionContext!
/// let connection: Connection? = context.getConnection(connectionId)
/// // Objective-C:
/// InteractionContext* context;
/// Connection* connection = [context getConnection:connectionId];
/// </pre&gt:
/// \param id The id of the connection
///
///
/// returns:
/// The connection.
- (Connection * _Nullable)getConnection:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Returns a view for the interaction.
/// <pre&gt:
/// // Swift:
/// let view: UIView? = context.getView()
/// // Objective-C:
/// UIView* view = [context getView];
/// </pre&gt:
///
/// returns:
/// The component matching the selector or the position of the interaction or null if no match is found.
- (UIView * _Nullable)getView SWIFT_WARN_UNUSED_RESULT;
/// Returns the ‘selector’ of the position.
/// <pre&gt:
/// // Swift:
/// let position: String? = context.getPositionIdentifier()
/// // Objective-C:
/// NSString* position = [context getPositionIdentifier];
/// </pre&gt:
///
/// returns:
/// The selector, e.g. “#position_1”
- (NSString * _Nullable)getPositionIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Returns the ‘name’ of the position.
/// <pre&gt:
/// // Swift:
/// let positionName: String? = context.getPositionName()
/// // Objective-C:
/// NSString* positionName = [context getPositionName];
/// </pre&gt:
///
/// returns:
/// The name of the position, e.g. “Position 1”
- (NSString * _Nullable)getPositionName SWIFT_WARN_UNUSED_RESULT;
/// Returns value from parameters.
/// <ul>
///   <li>
///     param : key The key for the parameters
///   </li>
/// </ul>
///
/// returns:
/// the value from the parameters
- (NSString * _Nullable)getValueFromParametersWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC15BlueConicClient23PropertiesDialogueEvent")
@interface PropertiesDialogueEvent : Event
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull variantId;
@property (nonatomic, readonly, copy) NSString * _Nonnull position;
@property (nonatomic, readonly, copy) NSString * _Nonnull data;
- (nonnull instancetype)initWithVariantId:(NSString * _Nonnull)variantId position:(NSString * _Nonnull)position data:(NSString * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC15BlueConicClient18UpdateContentEvent")
@interface UpdateContentEvent : Event
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull content;
@property (nonatomic, readonly, copy) NSString * _Nonnull selector;
- (nonnull instancetype)initWithContent:(NSString * _Nonnull)content OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSelector:(NSString * _Nonnull)selector content:(NSString * _Nonnull)content OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC15BlueConicClient17UpdateValuesEvent")
@interface UpdateValuesEvent : Event
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull values;
@property (nonatomic, readonly, copy) NSString * _Nonnull selector;
- (nonnull instancetype)initWithValues:(NSArray<NSString *> * _Nonnull)values OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSelector:(NSString * _Nonnull)selector values:(NSArray<NSString *> * _Nonnull)values OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
